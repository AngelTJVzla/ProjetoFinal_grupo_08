import sqlite3pkg from 'sqlite3';
const sqlite3 = sqlite3pkg.verbose();

// Script de migraci√≥n para crear las nuevas tablas relacionales
const db = new sqlite3.Database("empresa.db", (err) => {
  if (err) {
    console.error("Erro ao abrir o banco de dados: " + err.message);
  } else {
    console.log("Conectado ao banco de dados empresa.db para migra√ß√£o.");
  }
});

// Funci√≥n para ejecutar queries de forma secuencial
const runQuery = (query, description) => {
  return new Promise((resolve, reject) => {
    db.run(query, (err) => {
      if (err) {
        console.error(`Erro ao ${description}: ` + err.message);
        reject(err);
      } else {
        console.log(`‚úÖ ${description} - OK`);
        resolve();
      }
    });
  });
};

// Funci√≥n para insertar datos iniciales
const insertData = (query, data, description) => {
  return new Promise((resolve, reject) => {
    const stmt = db.prepare(query);
    data.forEach(row => {
      stmt.run(row, (err) => {
        if (err && !err.message.includes('UNIQUE constraint failed')) {
          console.error(`Erro ao inserir ${description}: ` + err.message);
        }
      });
    });
    stmt.finalize((err) => {
      if (err) {
        reject(err);
      } else {
        console.log(`‚úÖ Dados iniciais de ${description} inseridos - OK`);
        resolve();
      }
    });
  });
};

async function runMigration() {
  try {
    console.log("üöÄ Iniciando migra√ß√£o do banco de dados...\n");

    // 1. Criar tabela Setores
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Setores (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        descricao TEXT
      )
    `, "criar tabela Setores");

    // 2. Criar tabela Paises
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Paises (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        codigo TEXT UNIQUE,
        continente TEXT
      )
    `, "criar tabela Paises");

    // 3. Criar tabela Habilidades
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Habilidades (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        categoria TEXT
      )
    `, "criar tabela Habilidades");

    // 4. Criar tabela Idiomas
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Idiomas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        codigo TEXT UNIQUE
      )
    `, "criar tabela Idiomas");

    // 5. Criar tabela TiposAjuda
    await runQuery(`
      CREATE TABLE IF NOT EXISTS TiposAjuda (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE NOT NULL,
        descricao TEXT
      )
    `, "criar tabela TiposAjuda");

    // 6. Criar tabela Vagas
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Vagas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        empresa_id INTEGER NOT NULL,
        titulo TEXT NOT NULL,
        descripcion TEXT NOT NULL,
        salario DECIMAL(10,2),
        tipo_contrato TEXT,
        nivel_experiencia TEXT,
        modalidade TEXT,
        requisitos TEXT,
        beneficios TEXT,
        ativa BOOLEAN DEFAULT 1,
        data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP,
        data_limite DATETIME,
        FOREIGN KEY (empresa_id) REFERENCES Empresas(id) ON DELETE CASCADE
      )
    `, "criar tabela Vagas");

    // 7. Criar tabela Candidaturas
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Candidaturas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        migrante_id INTEGER NOT NULL,
        vaga_id INTEGER NOT NULL,
        status TEXT DEFAULT 'pendente',
        data_candidatura DATETIME DEFAULT CURRENT_TIMESTAMP,
        mensagem TEXT,
        FOREIGN KEY (migrante_id) REFERENCES Migrantes(id) ON DELETE CASCADE,
        FOREIGN KEY (vaga_id) REFERENCES Vagas(id) ON DELETE CASCADE,
        UNIQUE(migrante_id, vaga_id)
      )
    `, "criar tabela Candidaturas");

    // 8. Criar tabela MigranteHabilidades
    await runQuery(`
      CREATE TABLE IF NOT EXISTS MigranteHabilidades (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        migrante_id INTEGER NOT NULL,
        habilidade_id INTEGER NOT NULL,
        nivel TEXT,
        FOREIGN KEY (migrante_id) REFERENCES Migrantes(id) ON DELETE CASCADE,
        FOREIGN KEY (habilidade_id) REFERENCES Habilidades(id) ON DELETE CASCADE,
        UNIQUE(migrante_id, habilidade_id)
      )
    `, "criar tabela MigranteHabilidades");

    // 9. Criar tabela VagaHabilidades
    await runQuery(`
      CREATE TABLE IF NOT EXISTS VagaHabilidades (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        vaga_id INTEGER NOT NULL,
        habilidade_id INTEGER NOT NULL,
        nivel_requerido TEXT,
        obrigatoria BOOLEAN DEFAULT 0,
        FOREIGN KEY (vaga_id) REFERENCES Vagas(id) ON DELETE CASCADE,
        FOREIGN KEY (habilidade_id) REFERENCES Habilidades(id) ON DELETE CASCADE,
        UNIQUE(vaga_id, habilidade_id)
      )
    `, "criar tabela VagaHabilidades");

    // 10. Criar tabela MigranteIdiomas
    await runQuery(`
      CREATE TABLE IF NOT EXISTS MigranteIdiomas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        migrante_id INTEGER NOT NULL,
        idioma_id INTEGER NOT NULL,
        nivel TEXT,
        FOREIGN KEY (migrante_id) REFERENCES Migrantes(id) ON DELETE CASCADE,
        FOREIGN KEY (idioma_id) REFERENCES Idiomas(id) ON DELETE CASCADE,
        UNIQUE(migrante_id, idioma_id)
      )
    `, "criar tabela MigranteIdiomas");

    // 11. Criar tabela Experiencias
    await runQuery(`
      CREATE TABLE IF NOT EXISTS Experiencias (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        migrante_id INTEGER NOT NULL,
        empresa TEXT NOT NULL,
        cargo TEXT NOT NULL,
        descricao TEXT,
        data_inicio DATE,
        data_fim DATE,
        ativo BOOLEAN DEFAULT 0,
        pais TEXT,
        FOREIGN KEY (migrante_id) REFERENCES Migrantes(id) ON DELETE CASCADE
      )
    `, "criar tabela Experiencias");

    // 12. Criar tabela EmpresaTiposAjuda
    await runQuery(`
      CREATE TABLE IF NOT EXISTS EmpresaTiposAjuda (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        empresa_id INTEGER NOT NULL,
        tipo_ajuda_id INTEGER NOT NULL,
        detalhes TEXT,
        FOREIGN KEY (empresa_id) REFERENCES Empresas(id) ON DELETE CASCADE,
        FOREIGN KEY (tipo_ajuda_id) REFERENCES TiposAjuda(id) ON DELETE CASCADE,
        UNIQUE(empresa_id, tipo_ajuda_id)
      )
    `, "criar tabela EmpresaTiposAjuda");

    // 13. Adicionar colunas para referencias nas tablas existentes
    try {
      await runQuery(`ALTER TABLE Migrantes ADD COLUMN pais_id INTEGER`, "adicionar coluna pais_id em Migrantes");
    } catch (err) {
      console.log("‚ö†Ô∏è  Coluna pais_id j√° existe em Migrantes");
    }

    try {
      await runQuery(`ALTER TABLE Empresas ADD COLUMN setor_id INTEGER`, "adicionar coluna setor_id em Empresas");
    } catch (err) {
      console.log("‚ö†Ô∏è  Coluna setor_id j√° existe em Empresas");
    }

    // INSERIR DADOS INICIAIS
    console.log("\nüìä Inserindo dados iniciais...\n");

    // Setores
    await insertData(
      `INSERT OR IGNORE INTO Setores (nome, descricao) VALUES (?, ?)`,
      [
        ['Tecnologia', 'Empresas de desenvolvimento de software, TI e inova√ß√£o'],
        ['Sa√∫de', 'Hospitais, cl√≠nicas e servi√ßos de sa√∫de'],
        ['Educa√ß√£o', 'Institui√ß√µes de ensino e treinamento'],
        ['Constru√ß√£o Civil', 'Construtoras e empresas de engenharia'],
        ['Alimenta√ß√£o', 'Restaurantes, food service e ind√∫stria aliment√≠cia'],
        ['Varejo', 'Lojas, com√©rcio e vendas'],
        ['Servi√ßos', 'Presta√ß√£o de servi√ßos diversos'],
        ['Ind√∫stria', 'Manufatura e produ√ß√£o industrial'],
        ['Turismo', 'Hot√©is, ag√™ncias de viagem e turismo'],
        ['Transporte', 'Log√≠stica, transportes e entregas']
      ],
      "setores"
    );

    // Pa√≠ses
    await insertData(
      `INSERT OR IGNORE INTO Paises (nome, codigo, continente) VALUES (?, ?, ?)`,
      [
        ['Brasil', 'BR', 'Am√©rica do Sul'],
        ['Venezuela', 'VE', 'Am√©rica do Sul'],
        ['Col√¥mbia', 'CO', 'Am√©rica do Sul'],
        ['Peru', 'PE', 'Am√©rica do Sul'],
        ['Argentina', 'AR', 'Am√©rica do Sul'],
        ['Equador', 'EC', 'Am√©rica do Sul'],
        ['Bol√≠via', 'BO', 'Am√©rica do Sul'],
        ['Chile', 'CL', 'Am√©rica do Sul'],
        ['Uruguai', 'UY', 'Am√©rica do Sul'],
        ['Paraguai', 'PY', 'Am√©rica do Sul'],
        ['Haiti', 'HT', 'Am√©rica Central'],
        ['Cuba', 'CU', 'Am√©rica Central']
      ],
      "pa√≠ses"
    );

    // Habilidades
    await insertData(
      `INSERT OR IGNORE INTO Habilidades (nome, categoria) VALUES (?, ?)`,
      [
        // T√©cnicas
        ['JavaScript', 'T√©cnica'],
        ['Python', 'T√©cnica'],
        ['React', 'T√©cnica'],
        ['Node.js', 'T√©cnica'],
        ['SQL', 'T√©cnica'],
        ['HTML/CSS', 'T√©cnica'],
        ['Photoshop', 'T√©cnica'],
        ['Excel', 'T√©cnica'],
        ['AutoCAD', 'T√©cnica'],
        ['Soldagem', 'T√©cnica'],
        ['Costura', 'T√©cnica'],
        ['Culin√°ria', 'T√©cnica'],
        ['Enfermagem', 'T√©cnica'],
        ['Contabilidade', 'T√©cnica'],
        
        // Soft Skills
        ['Comunica√ß√£o', 'Soft Skill'],
        ['Lideran√ßa', 'Soft Skill'],
        ['Trabalho em Equipe', 'Soft Skill'],
        ['Resolu√ß√£o de Problemas', 'Soft Skill'],
        ['Adaptabilidade', 'Soft Skill'],
        ['Criatividade', 'Soft Skill'],
        ['Organiza√ß√£o', 'Soft Skill'],
        ['Proatividade', 'Soft Skill']
      ],
      "habilidades"
    );

    // Idiomas
    await insertData(
      `INSERT OR IGNORE INTO Idiomas (nome, codigo) VALUES (?, ?)`,
      [
        ['Portugu√™s', 'pt'],
        ['Espanhol', 'es'],
        ['Ingl√™s', 'en'],
        ['Franc√™s', 'fr'],
        ['Italiano', 'it'],
        ['Alem√£o', 'de'],
        ['Creole', 'ht']
      ],
      "idiomas"
    );

    // Tipos de Ajuda
    await insertData(
      `INSERT OR IGNORE INTO TiposAjuda (nome, descricao) VALUES (?, ?)`,
      [
        ['Documenta√ß√£o', 'Aux√≠lio com documentos e regulariza√ß√£o'],
        ['Capacita√ß√£o', 'Cursos e treinamentos profissionais'],
        ['Moradia', 'Aux√≠lio com habita√ß√£o tempor√°ria'],
        ['Idioma', 'Aulas de portugu√™s e outros idiomas'],
        ['Sa√∫de', 'Assist√™ncia m√©dica e psicol√≥gica'],
        ['Jur√≠dico', 'Orienta√ß√£o e assist√™ncia jur√≠dica'],
        ['Alimenta√ß√£o', 'Fornecimento de alimenta√ß√£o'],
        ['Transporte', 'Aux√≠lio com transporte urbano'],
        ['Educa√ß√£o', 'Acesso √† educa√ß√£o formal'],
        ['Inclus√£o Social', 'Atividades de integra√ß√£o social']
      ],
      "tipos de ajuda"
    );

    console.log("\nüéâ Migra√ß√£o conclu√≠da com sucesso!");
    console.log("‚úÖ Todas as tabelas relacionais foram criadas");
    console.log("‚úÖ Dados iniciais foram inseridos");
    console.log("\nAgora voc√™ pode usar o sistema com funcionalidades relacionais!\n");

  } catch (error) {
    console.error("‚ùå Erro durante a migra√ß√£o:", error);
  } finally {
    db.close((err) => {
      if (err) {
        console.error("Erro ao fechar o banco: " + err.message);
      } else {
        console.log("Conex√£o com o banco de dados fechada.");
      }
    });
  }
}

// Executar migra√ß√£o
runMigration();
